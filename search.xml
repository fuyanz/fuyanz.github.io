<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>html标签</title>
      <link href="2021/05/25/%E6%A0%87%E7%AD%BE2/"/>
      <url>2021/05/25/%E6%A0%87%E7%AD%BE2/</url>
      
        <content type="html"><![CDATA[<h2 id="form标签"><a href="#form标签" class="headerlink" title="form标签"></a>form标签</h2><p>表单用来收集用户数据，并将其提交到对应的地址</p><p>我们的所有表单元素都要写在一个form标签内部，form标签是一个功能性的标签，不是结构性</p><p>form：是表单的语义化标签</p><p>属性：</p><p>​    name: 定义表单的名称</p><p>​    action：设置数据的提交的地址</p><p>​    method:    设置数据提交的方式</p><p>​    target：    页面打开方式</p><p>表单中的控件：textarea  文本域      select   下拉列表          input     输入框        button    按钮</p><h4 id="textarea与label标签"><a href="#textarea与label标签" class="headerlink" title="textarea与label标签"></a>textarea与label标签</h4><p>textarea 多行文本域，多行文本输入框</p><p>属性:</p><p>​    rows    设置行高，属性值是数字</p><p>​    cols    设置列宽，属性值是数字   数字是字节</p><p>label    标签为表单控件（textarea，input）定义标注</p><p>for    规定label绑定到哪个表单控件（id）</p><p>​        <strong>我们还可以将表单控件写在label标签内，实现联动</strong></p><pre class="line-numbers language-none"><code class="language-none">&lt;label&gt;简介 &lt;textarea&gt;&lt;&#x2F;textarea&gt;&lt;&#x2F;label&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>表单：action：提交数据的地址</strong></p><p>​        <strong>method：提交数据的方式</strong></p><p>​        <strong>target：在哪里查看结果</strong></p><h4 id="select标签"><a href="#select标签" class="headerlink" title="select标签"></a>select标签</h4><p>select 标签可以创建单选或多选菜单，属性：</p><p>​    multiple    设置多选</p><p>​    size            设置显示在页面上的列表的项数1-7</p><p>​    option        标签用定义下拉列表中的一个选项（一个条目），属性：</p><p>​    selected        设置默认被选中的列表项（布尔型属性）</p><p><strong>内容只能是文本，不能出现标签</strong></p><p>optgroup        标签定义选项组</p><p>label                 为选项组规定描述</p><p>multiple            多选 复选</p><h4 id="button标签"><a href="#button标签" class="headerlink" title="button标签"></a>button标签</h4><p>button 标签定义一个按钮，属性：</p><p>​    type    规定按钮的类型（button，reset，submint）</p><p>​    <strong>button控件与input type=“button”相比：</strong></p><p>​            <strong>button标签之间的所有内容都是按钮的内容，比如文本或多媒体内容</strong></p><p>兼容性：ie默认的类型是button，而其他浏览器中(包括w3c规范)的默认值是“submit“</p><h3 id="input标签"><a href="#input标签" class="headerlink" title="input标签"></a>input标签</h3><p>表示输入的语义标签，用于收集用户信息，是单标签，也叫作自封闭标签</p><p>控件的类型由type属性确定：</p><p>​    text        单行文本框，文本输入框（默认的输入框类型）</p><p>​    pattern    规定输入字段的模式或格式（html5新增）</p><p>​    password    密码输入框</p><p>​    radio    单选框</p><p>​    checkbox    复选框，多选框</p><p>​    单选和复选的name值必须一致，这样才能保证是同一个题干下面的不同选项</p><p>checked    设置默认被选中；布尔型属性</p><pre class="line-numbers language-none"><code class="language-none">&lt;input type&#x3D;&quot;text&quot;  id&#x3D;&quot;username&quot; pattern&#x3D;&quot;[0-9]&#123;2~6&#125;&quot;&gt;&#x2F;&#x2F;2到5位数字<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="表单通用属性"><a href="#表单通用属性" class="headerlink" title="表单通用属性"></a>表单通用属性</h5><p>value    定义送往服务器的选项值（表单控件的值）</p><p>autofocus    规定在页面加载后文本区域自动获得焦点</p><p>form    规定文本区域所属的一个或多个表单</p><p>name    规定文本区的名称</p><p>placeholder    规定描述文本区预期值的简短提示</p><p>disabled    规定禁用该文本区</p><p>readonly    规定文本区为只读</p><p>maxlength    规定文本区域的最大字符数（textarea与input）</p><p>required    规定文本区域是必填的（textarea与input）</p><h5 id="input标签的type属性"><a href="#input标签的type属性" class="headerlink" title="input标签的type属性"></a>input标签的type属性</h5><p>image    图像域</p><p>src    设置图片的路径    width height设置图片的宽高</p><p>file    文件</p><p>hidden    隐藏文件</p><p>button    普通按钮</p><p>submit    提交按钮</p><p>reset    重置按钮</p><h4 id="废弃标签"><a href="#废弃标签" class="headerlink" title="废弃标签"></a>废弃标签</h4><p>font    字体标签</p><p>frame    定义框架</p><p>b    加粗</p><p>i    斜体字</p><p>u    下划线</p><p>s    删除线</p><h4 id="其他标签"><a href="#其他标签" class="headerlink" title="其他标签"></a>其他标签</h4><p>pre    预格式化原样输出</p><p>code    单行代码</p><p>strong    强调标签，加粗效果</p><p>em    强调标签，斜体字效果</p><p>ins    下划线</p><p>del    删除线</p><p>abbr    定义缩写</p><p>address    定义地址</p><p>iframe    内联框架</p><p>br    换行</p><p>hr    横线</p><h4 id="实体符号"><a href="#实体符号" class="headerlink" title="实体符号"></a>实体符号</h4><p>&amp;nbsp；    空格</p><p>&amp;emsp；    全角空格</p><p>&amp;cope；    版权符号</p><p>&amp;yen；    人民币符号</p><p>&amp;gt；    大于</p><p>&amp;lt；    小于</p><h4 id="代码规范"><a href="#代码规范" class="headerlink" title="代码规范"></a>代码规范</h4><p>标签名必须使用小写字母</p><p>属性名必须使用小写字母并用双引号包围属性值</p><p>使用4个空格作为一个缩进层级</p><p>class必须单词字母小写，单词以-分隔</p><p>id使用驼峰式命名</p>]]></content>
      
      
      <categories>
          
          <category> 基础知识 </category>
          
          <category> 前端基础知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基础知识 </tag>
            
            <tag> 前端基础知识 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>css基础知识</title>
      <link href="2021/05/25/css/"/>
      <url>2021/05/25/css/</url>
      
        <content type="html"><![CDATA[<h1 id="css基础知识"><a href="#css基础知识" class="headerlink" title="css基础知识"></a>css基础知识</h1><h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><hr><p>css：cascading style sheet。</p><p>层叠式</p><p>样式</p><p>使用符合css语法的纯文本为页面添加样式效果</p><p>Web前端三层：</p><p>结构层                            作用：从结构角度搭建网页（html）</p><p>样式层                             作用：从美化角度书写样式（css）</p><p>行为层                             作用：从交互的角度描述行为（js）</p><hr><p>引入css的目的:为了达到结构与样式的分离</p><p>引入css的好处：</p><p>​    html结构代码书写量大大减少</p><p>​    可以提供更加丰富的效果</p><p>​    浏览器兼容性更好</p><h2 id="css选择器"><a href="#css选择器" class="headerlink" title="css选择器"></a>css选择器</h2><p>css包括的部分：</p><p>​    <strong>选择器</strong>(选择哪个标签进行样式设置)</p><p>​    <strong>样式规则</strong>（给标签添加什么属性）</p><ul><li><strong>样式</strong></li><li><strong>样式值</strong></li></ul><p>多个样式之间使用分隔号隔开</p><p>css属性是逐条排列的，有什么样式就直接写什么属性</p><hr><h3 id="语法如下："><a href="#语法如下：" class="headerlink" title="语法如下："></a>语法如下：</h3><p>​    选择器{</p><p>样式：样式值；</p><p>}</p><p><strong>css的作用：</strong>可以给文字添加各种样式，给盒子添加样式用于布局</p><hr><h3 id="对比HTML"><a href="#对比HTML" class="headerlink" title="对比HTML"></a>对比HTML</h3><p>键值对的概念：</p><p>​    html的键值对：k=”v”</p><p>​    css的键值对：k：v</p><p><strong>冒号和分号的重要性</strong>：冒号和分号必须写</p><p>​    每一个属性之间必须用冒号隔开</p><p>css对空格、换行、缩进也不敏感</p><p>在书写的时候：每个属性都换行缩进，为了清晰易读</p><p>再将css文件发送到服务器之前：对代码进行压缩，删除所有的空格、换行，让代码在一行显示。文件的体积变小，这样加载速度就变快了。</p><hr><h3 id="css的引入方式"><a href="#css的引入方式" class="headerlink" title="css的引入方式"></a>css的引入方式</h3><p>css也是一门标记语言，通过浏览器可以渲染</p><p>但css必须绑定HTML,来渲染结构和内容（不能单独运行）</p><p>浏览器运行的还是我们的html网页文件</p><hr><p>引入方式有：</p><ul><li><strong>行内式</strong><ul><li>直接使用 <tag style="样式：样式值；"/><ul><li>行内式耦合性较高（并没有达到结构与样式的分离），后期维护成本较高</li></ul></li></ul></li><li><strong>嵌入式</strong><ul><li>在head标签内，使用style标签引入css样式，解决了行内式的问题，但是还是没有做到结构与样式的完全分离<ul><li>html文档从上往下依次执行，如果嵌入的样式过多，会影响页面的加载速度</li></ul></li></ul></li><li><strong>外链式</strong><ul><li>在head标签内，使用link标签引入外部独立的css文件<ul><li><strong>css文件不能使用数字开头</strong></li><li>达到了结构与样式的完全分离</li><li>通过link引入的css文件，与html文件是并行下载的</li></ul></li></ul></li><li><strong>导入式</strong><ul><li>在style标签内，使用@import url（’css路径’）<ul><li>但这种方式，是在html加载完成后，才加载的。会影响样式渲染的速度，常见的现象是页面加载时，先闪一下，然后正常</li></ul></li></ul></li></ul><hr><h4 id="优先级"><a href="#优先级" class="headerlink" title="优先级"></a>优先级</h4><p>样式的几种引入方式：就近原则</p><p>​    这也是层叠性的体现</p><p>​    不同的引入方式，通过同样的选择器设置相同的样式，根据我们设置样式的距离，决定渲染的最终结果（层叠）</p><p>​    结果：后面的样式覆盖前面的样式</p><hr><h3 id="通配符选择器"><a href="#通配符选择器" class="headerlink" title="通配符选择器"></a>通配符选择器</h3><p>css选择器用来筛选符合条件的标签</p><h4 id="基本选择器"><a href="#基本选择器" class="headerlink" title="基本选择器"></a>基本选择器</h4><ul><li><h5 id="通配符（全局）选择器"><a href="#通配符（全局）选择器" class="headerlink" title="通配符（全局）选择器"></a>通配符（全局）选择器</h5><p>​    用来对默认的样式进行标准化，如</p><p>​        *{样式：样式值；}</p></li><li><h5 id="标签选择器"><a href="#标签选择器" class="headerlink" title="标签选择器"></a>标签选择器</h5><p>​    匹配文档中所有该类型的元素，如</p><p>​        标签名{样式：样式值；}</p><p><strong>选择器</strong>：想给其添加样式的html标签名称</p><p>​    以标签本身作为选择器的元素。标签是什么就写什么</p><p>标签名直接书写可以选择页面上所有同种的标签，不会管我们嵌套多少层，就算嵌套的层数再多再深都能选中</p><p><strong>用途</strong>：可以清空默认样式表，设置默认样式等</p></li><li><h5 id="类选择器"><a href="#类选择器" class="headerlink" title="类选择器"></a>类选择器</h5><p>​    匹配筛选指定类名的元素，如</p><p>​        .类名{样式：样式值；}</p><p>通过元素上面的class属性的值可以选中相同类名的所有标签元素</p><p>​    书写方式：以点开头，后面紧跟类名</p><p><strong>优势</strong>：可以给我们想要的元素添加统一的类型，设置统一的样式</p><p><strong>特殊运用</strong>：原子类（公用类）原子类的属性尽量的少</p><p><strong>添加多个类名</strong>：一个class可以有多个类名，用空格隔开</p><p><strong>类名的命名规则</strong>：必须以字母开头（严格区分大小写）可以有数字下划线和横线</p><p>id选择器一般默认都有js行为</p></li><li><h5 id="id选择器"><a href="#id选择器" class="headerlink" title="id选择器"></a>id选择器</h5><p>​    匹配筛选id值为指定元素，如</p><p>​        #id名{样式·：样式值；}</p><p>通过一个html的id属性选择这个元素，添加样式</p><p>​    <strong>注意</strong>：#后面必须紧跟id名，不能有空格</p><p>​                一个id名在一个html页面中只能出现一次</p><p><strong>ID属性的命名规则</strong>：必须以字母开头（严格区分大小写），可以有数字下划线和横线，建议驼峰式</p><hr><p><strong>层叠性的体现</strong>：我们可以通过标签选择器和id选择器同时选择一个标签元素，给它添加不同的样式，这些样式都会在标签上面进行显示</p><hr></li><li><h4 id="高级选择器"><a href="#高级选择器" class="headerlink" title="高级选择器"></a>高级选择器</h4><ul><li><h6 id="后代选择器"><a href="#后代选择器" class="headerlink" title="后代选择器"></a>后代选择器</h6><p>​    通过有嵌套关系的标签选择器或类选择器，确定一个大的范围，在大的范围内再次进行选择，可以多次嵌套</p><p>​    <strong>书写规则</strong>：用空格隔开每一层选择器</p><p>​        <strong>后代不止包含子级，还有孙子级等</strong></p><p>​        不管嵌套关系有多少层，只要是嵌套内的都会被选择</p><ul><li><h6 id="交集选择器"><a href="#交集选择器" class="headerlink" title="交集选择器"></a>交集选择器</h6><p>选中两个选择器都有的元素</p><p>交集选择器写法:将两个选择器连续书写，中间没有任何空格</p><p><strong>可以连续交集</strong></p></li><li><h6 id="并集选择器"><a href="#并集选择器" class="headerlink" title="并集选择器"></a>并集选择器</h6><p>选中多个元素，每个元素之间用逗号隔开</p><p><strong>只要看到逗号，就是并集选择器·</strong></p></li></ul><hr></li></ul></li></ul><h2 id="代码规范"><a href="#代码规范" class="headerlink" title="代码规范"></a>代码规范</h2><ol><li>使用4个空格作为一个缩进层次</li><li>选择器与{之间必须包含空格</li><li>属性名与之后的分号：之间不允许有空格</li><li>分号： 与属性值之间必须包含空格</li><li>列表型属性值书写在单行时，“，”后必须跟一个空格</li><li>当一组样式包含多组选择器时，每组选择器声明必须独占一行</li><li>》&gt;、+、~选择器的两边各保留一个空格</li><li>属性选择器中的值必须用双引号包围，文本内容必须用双引号包围</li><li>属性定义必须另起一行，属性定义后必须以分号结尾</li></ol><hr><h2 id="继承与层叠"><a href="#继承与层叠" class="headerlink" title="继承与层叠"></a>继承与层叠</h2><h3 id="继承性："><a href="#继承性：" class="headerlink" title="继承性："></a>继承性：</h3><p>在css中，有一些属性，如果给父级元素设置了，那么他的后代元素都将继承这个属性</p><p><strong>只有文字的属性能够继承，盒子的属性不能继承</strong></p><p><strong>文字属性：</strong>color、font系列、line系列、text系列</p><p><strong>盒子属性：</strong>background系列、width、height、border系列，浮动、定位</p><p><strong>css的继承性是一个很好的语言特性</strong></p><p><strong>作用：</strong>可以简化css代码，有的属性可以设置给body，body内部的标签都会继承这个属性</p><p><strong>层叠性的体现：</strong>css继承性</p><hr><h3 id="选择器的权值"><a href="#选择器的权值" class="headerlink" title="选择器的权值"></a>选择器的权值</h3><p><strong>权值：</strong>选择器的针对性越高，权值越高</p><p><strong>权重排序：</strong>！important&gt;行内样式&gt;id&gt;类|伪类|属性&gt;标签&gt;通配符</p><p>针对同一个元素标签，当设置了不同的选择器时，要判断权值的大小，权值越大优先级越高，基本选择器权值如下：</p><table><thead><tr><th>选择器</th><th>权值</th></tr></thead><tbody><tr><td>继承，通配符等</td><td>0.1</td></tr><tr><td>标签选择器</td><td>1</td></tr><tr><td>类选择器，伪类，属性等</td><td>10</td></tr><tr><td>id选择器</td><td>100</td></tr><tr><td>行内使用style</td><td>1000</td></tr><tr><td>！important</td><td>无穷大</td></tr></tbody></table><p><strong>某些浏览器下：</strong>1个类选择器=255标签选择器</p><p>1id选择器=255个类选择器</p><hr><h3 id="计算权重"><a href="#计算权重" class="headerlink" title="计算权重"></a>计算权重</h3><p>权重：对选择器组合后的权值求和，权重越高使用样式的优先级越大</p><p>权重的计算方法：</p><p>比较id、类、标签的数量，依次比较，如果id的数量多，就权重最大。</p><p>如果id数量相同，比较类的数量，类多的权重大。</p><p>如果类的数量相同，比较标签的数量，标签多的权重大。</p><p>如果标签相同，看css的书写顺序，根据就近原则，优先使用离元素最近的的选择器（最后书写的）</p><p><strong>如果权重相同，最后出现的就是我们显示的</strong></p><p>比较权重的时候，一定要让选择器作用到元素上</p><hr><p><strong>层叠性：</strong>针对同一个标签元素，当设置了不同的选择器时，权重高的层叠掉权重低的样式</p><hr><h3 id="！important"><a href="#！important" class="headerlink" title="！important"></a>！important</h3><p>直接书写在css样式后，来提高权重，权重最大</p><ul><li>如果选中了元素，它的权重最高</li><li>如果没有选中元素，它不会影响就近原则</li><li>如果在多个选择器中使用，会受到选择器权重的影响</li></ul><p>！important针对的是单个css属性，而不是一个选择器</p><hr><h3 id="层叠性"><a href="#层叠性" class="headerlink" title="层叠性"></a>层叠性</h3><p>多组选择器的样式可以作用在同一个元素上</p><ul><li>如果选中了这个元素，计算选择器的权重</li><li>如果没有选中元素，看继承性</li><li>如果没有选中，也有权重，权重为0，不能进行权重的比较</li></ul><p><strong>比较的是选择器离目标元素的距离</strong>，距离近的就是我们继承的属性</p><ul><li>如果没有选中目标，样式靠继承。遵循就近原则。<ul><li>距离不同，谁近选谁</li><li>距离相同，再次比较权重</li><li>距离相同，权重相同，谁写在最后面听谁的，就近原则</li></ul></li></ul><hr><p>如果是并集选择器，需要拆开来看</p><pre class="line-numbers language-flow" data-language="flow"><code class="language-flow">st<span class="token operator">=></span>start<span class="token operator">:</span> 先看有没有被选中e<span class="token operator">=></span>end<span class="token operator">:</span> 就近原则，选择css里面最后书写的f<span class="token operator">=></span>end<span class="token operator">:</span> 选择权重大的g<span class="token operator">=></span>end<span class="token operator">:</span> 最近原则，选择离得最近的c1<span class="token operator">=></span>condition<span class="token operator">:</span> 被选中没有c2<span class="token operator">=></span>condition<span class="token operator">:</span> 权重有大小之分吗c3<span class="token operator">=></span>condition<span class="token operator">:</span> 距离是否相同op1<span class="token operator">=></span>operation<span class="token operator">:</span> 比较权重op2<span class="token operator">=></span>operation<span class="token operator">:</span> 继承自祖先元素io1<span class="token operator">=></span>inputoutput<span class="token operator">:</span> 有大小之分io2<span class="token operator">=></span>inputoutput<span class="token operator">:</span> 权重相同st<span class="token operator">-</span><span class="token operator">></span>c1<span class="token function">c1</span><span class="token punctuation">(</span>yes<span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span>op1<span class="token operator">-</span><span class="token operator">></span>c2<span class="token function">c2</span><span class="token punctuation">(</span>yes<span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span>io1<span class="token operator">-</span><span class="token operator">></span>f<span class="token function">c2</span><span class="token punctuation">(</span>no<span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span>io2<span class="token operator">-</span><span class="token operator">></span>e<span class="token function">c1</span><span class="token punctuation">(</span>no<span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span>op2<span class="token operator">-</span><span class="token operator">></span>c3<span class="token function">c3</span><span class="token punctuation">(</span>yes<span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span>op1<span class="token function">c3</span><span class="token punctuation">(</span>no<span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span>g<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="文字与排版"><a href="#文字与排版" class="headerlink" title="文字与排版"></a>文字与排版</h2><h4 id="颜色的表示法–十六进制"><a href="#颜色的表示法–十六进制" class="headerlink" title="颜色的表示法–十六进制"></a>颜色的表示法–十六进制</h4><ul><li><p>十六进制颜色以#开头</p></li><li><p>每两位代表一种颜</p><ul><li>分别是三原色：红绿蓝</li></ul></li><li><p>每个色用16进制来表示</p><ul><li>十六进制组成：0-9 a-f：代表0-16</li><li>十进制0-255</li><li>十六进制00-ff</li></ul><h4 id="—rgb（）表示法"><a href="#—rgb（）表示法" class="headerlink" title="—rgb（）表示法"></a>—rgb（）表示法</h4><p>rgb（r，g，b）是由0-255之间的数字来表示</p><h4 id="—颜色表示法"><a href="#—颜色表示法" class="headerlink" title="—颜色表示法"></a>—颜色表示法</h4><p>用单词来表示</p><hr><h3 id="文字样式"><a href="#文字样式" class="headerlink" title="文字样式"></a>文字样式</h3><p> color    表示文字的颜色</p><p>font-size    设置字体的大小</p><p>font-family    设置文字的字体，如果设置多个字体，用逗号隔开</p><p><strong>英文写在前面 中文写在后面 备选写在最后</strong></p><p>网页有时候追求加载速度，中文字体写成英文单词</p><p>默认字体为宋体</p><p>font-style    italic、normal</p><p>font-weight    属性值100-900 bold bolder lighter normal</p><p>line-height    设置行高</p><p>font    设置顺序：font-style、font-variant、font-weight、font-size|line-height、font-family</p><hr><h3 id="文本样式"><a href="#文本样式" class="headerlink" title="文本样式"></a>文本样式</h3><p>text-decoration    文本修饰</p><p>text-indent    首行缩进 <strong>缩进两个字符 text-indent：2em；</strong></p><p>text-align    设置文本的水平对齐方式 属性值有 left right center justify（分散对齐）</p><p>letter-spacing    设置字符间的间距（子母和汉字）</p><p>word-spacing    设置字与字之间的空白（单词与单词）</p><p>vertical-align    设置同一行内行内级元素垂直对齐方式</p><p>white-space    指定元素内的空白如何处理</p><ol><li>nomal    默认 会忽略空白</li><li>pre    空白会被保留</li><li>nowwrap  文本不会换行</li><li>pre-wrap   保留空白但正常换行</li><li>ecllipsis  合并空白 保留换行符</li></ol><p>text-overflow 当文本溢出时发生的事情</p><ol><li>​    clip 修建文本</li><li>   ellipsis 显示省略符号</li></ol></li></ul><hr><h3 id="继承性"><a href="#继承性" class="headerlink" title="继承性"></a>继承性</h3><p>文本相关的属性都可以被继承</p><p>text系列</p><p>line系列</p><p>盒子相关的属性不能被继承</p><hr><h4 id="css截字"><a href="#css截字" class="headerlink" title="css截字"></a>css截字</h4><p>设置容器宽度</p><p>设置white-space 文本拒绝换行</p><p>设置text-overflow 对超出的文本做修饰</p><p>设置overflow：hidden 隐藏溢出</p><hr><h3 id="列表样式"><a href="#列表样式" class="headerlink" title="列表样式"></a>列表样式</h3><p>list-style-type    设置列表项目符号类型</p><p>list-style-image    url（图片路径）设置列表项目符号为图片</p><p>list-style-position    inside|outside（默认)设置列表项目符号的位置</p><p>list-style     简写方式</p><hr><h2 id="盒模型"><a href="#盒模型" class="headerlink" title="盒模型"></a>盒模型</h2><p>盒模型：可以用来对元素进行布局</p><p>​    组成：</p><ul><li><p>content内容 <strong>height、width</strong></p></li><li><p>padding 内填充 </p></li><li><p>border 边框</p></li><li><p>margin 外边距</p><p>分类：盒子模型与怪异（ie）盒模型</p></li></ul><p>css3中定义盒子模型类型属性：</p><ul><li><p>box-sizing：content-box；</p></li><li><p>box-sizing：border-box；</p><p><strong>content-box内容盒：</strong></p><p>​        设置的width、height属性为内容的宽高</p><p><strong>border-box边框盒：</strong></p><p>​        设置的width、height属性为边框以内相关盒子属性 **（border+pafdding+content)**的宽高</p><p>width    设置宽度</p><p>height    设置高度 </p></li></ul><hr><h4 id="盒模型宽高的计算"><a href="#盒模型宽高的计算" class="headerlink" title="盒模型宽高的计算"></a>盒模型宽高的计算</h4><h5 id="标准盒模型："><a href="#标准盒模型：" class="headerlink" title="标准盒模型："></a>标准盒模型：</h5><p>​    元素的宽度和高度：content/width/height+border+padding+margin（加值法）</p><p>​        怪异盒模型：width/height(content+border+padding)+margin（减值法）</p><p><img src="https://cdn.jsdelivr.net/gh/fuyanz/picture@main/image/blogphoto/1621929487279-image-20210225114658288.png"></p><hr><h4 id="元素宽高"><a href="#元素宽高" class="headerlink" title="元素宽高"></a>元素宽高</h4><p>左右留白：网站左侧内边距是固定的，内容在右侧甩出的空白不一样，可以给定一个足够宽度，只设置左边的内边距，右边空白区域自动剩余</p><p><strong>实际操作：</strong>不设置高度，高度用内部的内容撑开</p><p>​    是为了避免后期的问题</p><p>​    新闻列表，有加有减。可能会加载很多，为了让盒子自动撑开，不能设置高度</p><p>​    <strong>这只是一种应急情况</strong></p><hr><h4 id="magin"><a href="#magin" class="headerlink" title="magin"></a>magin</h4><p>同级元素之间的距离，或者距离父元素之前的距离；</p><p>margin设置分类：</p><ol><li>​    单值法   上下左右</li><li>​    二值法   上下，左右</li><li>​    三值法   上  左右 下</li><li>​    四值法    上右下左</li></ol><p>按照方向划分：</p><p>​    margin-top    设置上边距</p><p>​    margin-right    设置右边距</p><p>​    margin-bottom    设置下边距</p><p>​    margin-left    设置左边距</p><h3 id="margin塌陷"><a href="#margin塌陷" class="headerlink" title="margin塌陷"></a><strong>margin塌陷</strong></h3><p>同级元素分别设置上下外边距，两个盒子之间的上下外边距会产生合并（塌陷），之间的距离以设置的margin-bottom（上面盒子）或margin-top（下面盒子）的值中较大的那个为准</p><p>存在嵌套关系的元素，父盒子在不设置padding、border、overflow等属性的情况下，会出现外边距合并（塌陷）问题，嵌套关系的元素如果同时设置了上下外边距，以最大的为准</p><h4 id="父子之间"><a href="#父子之间" class="headerlink" title="父子之间"></a><strong>父子之间</strong></h4><ol><li><p>子元素设置了上边距，默认会传递给父元素</p></li><li><p>父元素设置了上边距，会与子元素合并</p><p>合并的时候，以大的为准</p></li></ol><h4 id="父子与后代之间"><a href="#父子与后代之间" class="headerlink" title="父子与后代之间"></a><strong>父子与后代之间</strong></h4><ol><li>后代元素设置的上边距会一直传递到body</li><li>父元素的上边距会与后代元素上边距合并，保留大的</li></ol><p><strong>可以通过padding，overflow，border来阻止margin-top的传递，必须显示设置</strong></p><h4 id=""><a href="#" class="headerlink" title=""></a></h4><h2 id="文档流"><a href="#文档流" class="headerlink" title="文档流"></a>文档流</h2><h2 id="浮动"><a href="#浮动" class="headerlink" title="浮动"></a>浮动</h2><h2 id="布局"><a href="#布局" class="headerlink" title="布局"></a>布局</h2><h2 id="背景与精灵图"><a href="#背景与精灵图" class="headerlink" title="背景与精灵图"></a>背景与精灵图</h2><h2 id="定位"><a href="#定位" class="headerlink" title="定位"></a>定位</h2><h2 id="hack与其他"><a href="#hack与其他" class="headerlink" title="hack与其他"></a>hack与其他</h2>]]></content>
      
      
      <categories>
          
          <category> 基础知识 </category>
          
          <category> 前端基础知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基础知识 </tag>
            
            <tag> 前端基础知识 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>html标签</title>
      <link href="2021/05/25/%E6%A0%87%E7%AD%BE/"/>
      <url>2021/05/25/%E6%A0%87%E7%AD%BE/</url>
      
        <content type="html"><![CDATA[<h1 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h1><h2 id="html"><a href="#html" class="headerlink" title="html"></a>html</h2><p>双标签</p><p>表示整个网页</p><p>属性：</p><ul><li><p>manifest  定义一个URL，在这个URL上描述了文档的缓存信息（html5）新增</p></li><li><p>xmlns 只有XHTML支持。规定XML的namespace属性</p><p><strong>在HTML5规范中，lang属性是全局属性</strong></p><p>xmlns表示命名空间：namespace</p><p>​        我们制作的网页 给不同的用户来浏览，命名空间规定我们的标签代表的含义，必须将命名空间进行统一</p></li></ul><h2 id="标签，元素与属性"><a href="#标签，元素与属性" class="headerlink" title="标签，元素与属性"></a>标签，元素与属性</h2><p>元素：网页实际上就是许许多多的html元素构成的文本文件</p><p>html元素就是构成HTML文件的基本对象，HTML元素是一个统称</p><p>标签：标记html元素</p><p>​    <strong>元素是实体，标签是名称（标记）</strong></p><p>属性：为html元素提供各种附加信息的就是HTML属性，它总是以“属性名=属性值”的这种名值对的形式出现，而且属性总是在html元素的开始标签中进行定义。</p><h2 id="head标签"><a href="#head标签" class="headerlink" title="head标签"></a>head标签</h2><p>用于定义文档的头部，是所有头部元素的容器。</p><p>head中的元素可以引用脚本，指示浏览器在哪里找到样式表，提供元信息等。</p><p>文档的头部描述了文档的各种属性和信息，包括文档的标题，在web中的位置以及和其其他文档的关系等</p><p>绝大多数的的文档头部包含的数据都不会真正作为内容显示给读者</p><p>这些标签可以用在head部分：</p><base><link><script><style><title><base><link><script><style><title><ul><li>base标签<ul><li>为页面上的所有链接规定默认的地址或者目标</li><li>herf：规定页面中所有相对链接的基准url</li><li>target：在何处打开页面中的链接（_blank,_parents，_self,_top,_framename) </li></ul></li><li>title标签内部放的是网页的名字<ul><li>里面的内容可以帮我们提高搜索引擎优化（SEO）</li></ul></li><li>link 定义文档与外部资源关系</li><li>style 定义内嵌样式</li><li>script 引入外部脚本 或定义内嵌脚本</li><li>meta 提供页面相关的元信息（meta-information），标签位于文档的头部，不包含任何内容<ul><li>content 定义与http-equiv或name属性相关的原信息</li><li>http-equiv 把content属性关联到HTTP头部（content-type，expires，refresh，set-cookie）</li><li>name 把content属性关联到一个名称（author，description，keywords（SEO优化等）</li></ul></li></ul><h2 id="字符集"><a href="#字符集" class="headerlink" title="字符集"></a>字符集</h2><p>定义了当前文件使用的字库</p><p>中文字库：utf-8：国际标准字库 一个汉字3个字节</p><p>GBK/gb2312：中国字库，国家标准。一个汉字2个字节。</p><p>分情况适用：网页是外文网站用utf-8，有大量中文，需要网页加载速度快用gbk</p><p><strong>必须保证设置的字符集和软件保存的字符集类型一致</strong></p><h2 id="body标签"><a href="#body标签" class="headerlink" title="body标签"></a>body标签</h2><p>作用：body部分是我们的网页主体，给客户浏览的区域</p><p>内容：里面放置的是我们html标签的网页解构</p><h2 id="html基本语法"><a href="#html基本语法" class="headerlink" title="html基本语法"></a>html基本语法</h2><p>标签之间对空格、缩进、换行不敏感，我们的标签嵌套关系敏感</p><p>tab：缩进 shift+tab：撤销缩进</p><p>空白折叠现象：文本内容区域如果有一个或者多个空格或者缩进或者换行，在浏览器中显示的时候，只显示一个空格</p><h2 id="标签分类"><a href="#标签分类" class="headerlink" title="标签分类"></a>标签分类</h2><p>html中标签的分类</p><p>​    容器级标签：h1-h6 pre div</p><p>​    文本级标签：p code span</p><p>​    文本级标签一般不能或不建议嵌套容器级标签，但是容器级可以嵌套文本级标签</p><h2 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h2><p>元素的属性：对元素的描述以及控制信息</p><p>属性分类:</p><ul><li><p>​    必须属性 img中的src alt（图片加载失败提示的内容）</p></li><li><p>​    可选属性img 中的 width height</p></li><li><p>标准（全局）属性 id class style lang</p></li><li><p>事件属性 onclick，onmouseover，onmouseout</p><h2 id="h系列标签"><a href="#h系列标签" class="headerlink" title="h系列标签"></a>h系列标签</h2><p>给文本添加标题语义用，不能互相嵌套</p><p>默认加粗</p><p>具有换行符</p></li></ul><h2 id="p标签"><a href="#p标签" class="headerlink" title="p标签"></a>p标签</h2><p>给文本添加段落语义</p><p>具有换行符</p><p><strong>p标签可以嵌套在块级元素内</strong></p><p>但p标签不能嵌套其他块元素 如div p h</p><h2 id="img标签"><a href="#img标签" class="headerlink" title="img标签"></a>img标签</h2><p>img标签是一个单标签</p><p>img标签的属性：</p><ul><li>​    src 添加资源文件的路径</li><li>​    alt 图片加载失败后的文本提示</li><li>​    title 文本提示信息（鼠标悬停）</li><li>​    width height</li><li>   border 设置图片的边框厚度（默认黑色实线)</li></ul><h2 id="路径"><a href="#路径" class="headerlink" title="路径"></a>路径</h2><p>​    绝对路径：目标文件所在的完整的路径（带盘符）</p><p>​    相对路径：</p><ol><li>​        /根目录</li><li>​        ./当前目录</li><li>​       ../退出当前目录</li></ol><h2 id="a标签"><a href="#a标签" class="headerlink" title="a标签"></a>a标签</h2><p>属性：</p><ul><li><p>​    href  设置超链接的地址 #代表连接到当前页面或者某个地址</p></li><li><p>   title   文本提示信息</p></li><li><p>   rel      规定当前文档与被链接文档之间的关系</p></li><li><p>   download   规定被下载的超链接目标</p></li><li><p>   media   规定被链接文档是为何种媒介、设备优化的</p></li><li><p>   type   规定被连接的文档的mime 类型</p></li><li><p> target   页面的打开方式</p></li><li><p>_self   当前页面中打开新页面 新页面覆盖当前页面</p></li><li><p>_blank  在新的页面中打开  会创建一个新的窗口</p></li><li><p>_parent   页面的父窗口或父框架中打开</p></li><li><p>_top   将页面在整个浏览器窗口打开</p></li><li><p>framename   在指定的框架中打开页面</p></li><li><p>锚点</p><ol><li><p>给标签设置id属性(要求id是惟一的)</p></li><li><p> 通过另一个a标签的href属性去链接这个锚点</p></li></ol><p>   可以连接到当前页面的指定位置</p><p>   还可以连接到其他页面的指定部分</p>   <pre class="line-numbers language-none"><code class="language-none">&lt;h1&gt;这里很多内容&lt;&#x2F;h1&gt;&lt;h1&gt;这里很多内容&lt;&#x2F;h1&gt;&lt;h1&gt;这里很多内容&lt;&#x2F;h1&gt;&lt;h1&gt;这里很多内容&lt;&#x2F;h1&gt;                              &lt;a href&#x3D;&quot;#top&quot;&gt;返回顶部&lt;&#x2F;a&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>   vscode快捷键 :h1{标题}+tab 创建的标签包含{}内部的内容</p><p>   ​                        h1{}*10+tab 创建十个这样的标题</p><p>   ​                        h1{$}*10+tab  $代表序号</p>   <pre class="line-numbers language-none"><code class="language-none">&lt;a href&#x3D;&quot;.&#x2F;xxx.html&quot;&gt;&lt;&#x2F;a&gt;&lt;a href&#x3D;&quot;.&#x2F;xxx.html#middle&quot;&gt;&lt;&#x2F;a&gt;&lt;h1&gt;这里很多内容&lt;&#x2F;h1&gt;&lt;p&gt;很多很多很多内容M&lt;&#x2F;p&gt;&lt;p id&#x3D;&quot;middle&quot;&gt;很多很多很多内容M&lt;&#x2F;p&gt;&lt;p&gt;很多很多很多内容M&lt;&#x2F;p&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="div和span标签"><a href="#div和span标签" class="headerlink" title="div和span标签"></a>div和span标签</h2><h3 id="div："><a href="#div：" class="headerlink" title="div："></a>div：</h3><p>容器级标签（division）用来划分独立的逻辑块</p><p>是一个容器（大的区域），本身在网页中没有任何默认样式，可以放置任何标签和内容</p><p>里面可以存放一些相近，相同功能的标签，div会把页面分割成一个小的区域</p><h3 id="span："><a href="#span：" class="headerlink" title="span："></a>span：</h3><p>文本级的标签，只能放文字图片表单元素等，用来修饰文本的效果（小的跨度范围）</p><p>**div作为容器，如果没有内容撑起，或者不设置宽高，是没有默认效果的 **</p><p>span标签需要配合css使用</p><ul><li><p>​    大的内容放div 小的内容放span</p></li><li><p>​    div盒子会独占一行，span的内容会写在一行</p></li></ul><h2 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h2><p>给文本添加无序的列表语义，项与项之间没有先后顺序</p><p>ul （unordered list）无序列表</p><p>li  （list item）  列表项</p><p>ul和li这两个标签必须同时出现，不能单独书写</p><p>ul里可以嵌套一个或者多个li，但ul里面只能放li标签不能放其他内容</p><p>li<strong>标签是个容器标签</strong>可以放置任何内容</p><p>默认li是小圆点样式</p><p>可以通过type属性修改：disc默认实心圆    circle 空心圆    square 实心方块</p><h2 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h2><p>ol   orderred list</p><p>li     list item</p><p>ol里面只能放li</p><p>ol元素属性：</p><p>​    type  属性设置有序列表的项目符号有且仅有5个</p><p>​    A   a  1  l  i</p><p>start     设置列表符号从第几个开始排列，属性值只能是阿拉伯数字</p><p>reversed   设置有序列表项目符号的倒序</p><p>（这是一个布尔型的属性）</p><p><strong>ul ol不能相互使用</strong></p><h2 id="定义列表"><a href="#定义列表" class="headerlink" title="定义列表"></a>定义列表</h2><p>dl   definition  list 定义列表</p><p>dt    definition  title 定义标题</p><p>dd    definition description  定义描述</p><ul><li>dl 里面嵌套了dt dd。dt，dd是同一级标签dd是对dt的解释说明</li><li>dl里面只能放置dt，dd。dt和dd都是容器级标签，里面的内容是不限制的</li><li>dl里面可以放置多组的dt和dd。dt后面的dd可以有多个。这些dd都是在解释上面的dt</li><li>dt后面可以没有dd，表示没有解释说明</li><li>实际工作中，经常将每一组dt和dd单独放在一个dl标签内部</li></ul><h2 id="表格基础"><a href="#表格基础" class="headerlink" title="表格基础"></a>表格基础</h2><p>table：定义表格容器</p><p>tr：table rows  定义行</p><p>th：table  head  定义表头</p><p>td：table  dock   定义单元格</p><p>三层嵌套关系：table&gt;tr&gt;th|td</p><p>最简单的表格要求每一行的单元格个数相同</p><p>如果表格有表头的概念：需要将td标签变成th</p><h3 id="table标签"><a href="#table标签" class="headerlink" title="table标签"></a>table标签</h3><p>属性：border 设置表格的边框</p><p>border color 设置边框的颜色</p><p>height width：设置表格的宽高</p><p>align：设置表格的整体对齐方式</p><p>cellspacing：设置边框与边框之间的距离</p><p>cellpadding：设置内容与边框之间的距离</p><p>background：设置表格的背景图片</p><p>bgcolor：设置表格的背景颜色</p><p>summary:表格隐藏信息，用来提高SEO</p><h3 id="tr-td-th"><a href="#tr-td-th" class="headerlink" title="tr,td,th"></a>tr,td,th</h3><p>tr：行语义，一对table标签中有几对tr，就代表这个表格有多少行，属性如下：</p><p>​        align    设置的当前单元格中文本的水平对齐方式</p><p>bgcolor，background </p><p>colspan    列合并，左右合并</p><p>rowspan    行合并，上下合并</p><h2 id="划分区域"><a href="#划分区域" class="headerlink" title="划分区域"></a>划分区域</h2><p>表格标题  caption</p><p>表头    thead</p><p>主体部分    tbody</p><h2 id="设置标题"><a href="#设置标题" class="headerlink" title="设置标题"></a>设置标题</h2><p>表格标题的添加方式：</p><ul><li>使用标题标签</li><li>使用表格自带的标题标签caption<ul><li>caption标签必须写在table开始标签的后面</li></ul></li><li>一个表格只能添加一对caption标签，只能有一个标签</li></ul><p><strong>表格中的一些固定嵌套</strong></p><p>​    table    一般嵌套tr，tr中嵌套td</p><p>​    只有td或th可以像div那样，作为容器嵌套任何东西</p>]]></content>
      
      
      <categories>
          
          <category> 基础知识 </category>
          
          <category> 前端基础知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基础知识 </tag>
            
            <tag> 前端基础知识 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>文档类型定义（DTD）</title>
      <link href="2021/05/25/DTD/"/>
      <url>2021/05/25/DTD/</url>
      
        <content type="html"><![CDATA[<h1 id="DTD"><a href="#DTD" class="headerlink" title="DTD"></a>DTD</h1><p>DocType Definition：文档类型定义（DTD），用来定义文档的规范。可以内部声明和外部声明。</p><ul><li>内部&lt;！DOCTYPE根元素[元素声明]&gt;</li><li>外部&lt;! ！DOCTYPE根元素 类型 文件名&gt;</li></ul><p>作用：规范了html使用的是哪个版本的HTML书写规范</p><h2 id="DTD版本"><a href="#DTD版本" class="headerlink" title="DTD版本"></a>DTD版本</h2><p>html4.01版本，结构和样式做了分离</p><p>Xhtml1.0版本，规范做了扩展升级</p><ul><li>​    代码必须用小写字母，属性必须用双引号包裹，结束标签必须写关闭符号等</li></ul><p>这两个规范分别包含了三个小规范：</p><ul><li>Strict<ul><li>严格版：不能使用废弃标签，font/b/u/i/,不能使用框架集（framesets）</li></ul></li><li>Transitional<ul><li>过渡版：通用版。可以使用废弃标签，不能使用框架集</li></ul></li><li>Frameset<ul><li>框架集版：能使用框架集</li></ul></li></ul><p>html5不基于SGML规范，不再区分3个小规范，所以不需要在引用DTD</p>]]></content>
      
      
      <categories>
          
          <category> 基础知识 </category>
          
          <category> 前端基础知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基础知识 </tag>
            
            <tag> 前端基础知识 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>html与纯文本</title>
      <link href="2021/05/25/html%E4%B8%8E%E7%BA%AF%E6%96%87%E6%9C%AC/"/>
      <url>2021/05/25/html%E4%B8%8E%E7%BA%AF%E6%96%87%E6%9C%AC/</url>
      
        <content type="html"><![CDATA[<h1 id="html与纯文本"><a href="#html与纯文本" class="headerlink" title="html与纯文本"></a>html与纯文本</h1><h2 id="纯文本"><a href="#纯文本" class="headerlink" title="纯文本"></a>纯文本</h2><p>最简单的：记事本 后缀.txt</p><p>​    特点：只保存文字内容</p><p>与word文档比较：</p><ul><li>​    word文档：不仅保存文本内容，还保存样式，同样的内容，大小要比txt文件大。</li><li>​    txt文件：只保存文本内容，不保存样式。大小只是文字内容的大小。</li></ul><p>txt文件它只能在同一个电脑修改样式，便于本机查看，保存的时候，不保存样式。</p><h2 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h2><p>html:Hypertext Markup Language.超文本标记语言</p><p>作用：用来制作网页</p><ul><li>超文本：超出了文本的范畴<ul><li>html语言用来给文本添加语义，用到的文本就叫做超文本。在网页里面不显示。</li></ul></li><li>标记：（标签）标记的存在的意义是提供了语义化</li><li>语言：语言规范</li></ul><p>语义：人们所能理解的</p><p>标签的作用：给我们的文本增加语义</p>]]></content>
      
      
      <categories>
          
          <category> 基础知识 </category>
          
          <category> 前端基础知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基础知识 </tag>
            
            <tag> 前端基础知识 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTTP与控制台</title>
      <link href="2021/05/25/HTTP%E4%B8%8E%E6%8E%A7%E5%88%B6%E5%8F%B0/"/>
      <url>2021/05/25/HTTP%E4%B8%8E%E6%8E%A7%E5%88%B6%E5%8F%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="HTTP与控制台"><a href="#HTTP与控制台" class="headerlink" title="HTTP与控制台"></a>HTTP与控制台</h1><h2 id="HTTP请求"><a href="#HTTP请求" class="headerlink" title="HTTP请求"></a>HTTP请求</h2><p>HTTP：HypertextTransfer Protocol，超文本传输协议</p><p>​    HTTP协议包含了请求和响应两个部分。都是需要依赖浏览器。</p><ul><li>请求：request，浏览器根据网址向对应的服务器发送请求。</li><li>响应：response，服务器根据请求响应文件，将文件传输给客户端，在浏览器中进行网页的渲染。</li></ul><p>发送HTTP请求的方法：</p><p>​    直接输入网址，点击超级链接。</p><p>访问页面时，会同时发出多个http请求，包含网页的图片、视频、音频等文件。</p><h2 id="浏览器控制台"><a href="#浏览器控制台" class="headerlink" title="浏览器控制台"></a>浏览器控制台</h2><p>打开控制台三种方式：</p><ol><li>​    浏览器——-右键——-检查</li><li>Ctrl+Shift+l</li><li>F12</li></ol><p>浏览器控制台介绍：</p><ul><li>​    Elements：查看html基本结构，html标签和html属性</li><li>style:  css样式</li><li>Computed:  计算后的样式</li><li>Console：控制台，调试js代码</li><li>Sources：查看资源文件，如html，css，js，图片文件等等</li><li>NetWork 网络请求</li></ul>]]></content>
      
      
      <categories>
          
          <category> 基础知识 </category>
          
          <category> 前端基础知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基础知识 </tag>
            
            <tag> 前端基础知识 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>浏览器与服务器</title>
      <link href="2021/05/25/%E6%B5%8F%E8%A7%88%E5%99%A8%E4%B8%8E%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
      <url>2021/05/25/%E6%B5%8F%E8%A7%88%E5%99%A8%E4%B8%8E%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="浏览器与服务器"><a href="#浏览器与服务器" class="headerlink" title="浏览器与服务器"></a>浏览器与服务器</h1><h2 id="服务器（server）"><a href="#服务器（server）" class="headerlink" title="服务器（server）"></a>服务器（server）</h2><p>作用：存放我们的数据</p><p>服务器必须24小时在线，掉线了数据就访问不到，就不能正常访问网页</p><p>可以通过个人计算机里面的一些软件，来远程控制服务器</p><h2 id="浏览器"><a href="#浏览器" class="headerlink" title="浏览器"></a>浏览器</h2><p>作用: HTTP 请求的发起，接收，都是由浏览器来完成的。浏览器有很多厂商提供</p><h3 id="全球五大浏览器"><a href="#全球五大浏览器" class="headerlink" title="全球五大浏览器"></a>全球五大浏览器</h3><ul><li>IE（Internet Explorer）<ul><li>内核：Trident  （IE Edge的内核为斯巴达）</li></ul></li><li>火狐（firefox）<ul><li>内核：gecko</li></ul></li><li>苹果（safari）<ul><li>内核：webkit</li></ul></li><li>谷歌（Chrome）<ul><li>内核：Blink</li></ul></li><li>欧朋(opera)<ul><li>内核：google blink</li></ul></li></ul><p>浏览器内核具有差异性，显示原生html有差异：</p><p>​    从服务器接收的数据会存放在一个临时的文件夹。接收我们缓存的数据（chrome://version/)</p><p>临时文件夹的作用：第二次访问同一个网站速度会变快，因为第一次访问的时候，大部分文件已经缓存在了本地</p>]]></content>
      
      
      <categories>
          
          <category> 基础知识 </category>
          
          <category> 前端基础知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基础知识 </tag>
            
            <tag> 前端基础知识 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>node知识---url处理</title>
      <link href="2021/04/03/node%E7%9F%A5%E8%AF%86-url%E5%A4%84%E7%90%86/"/>
      <url>2021/04/03/node%E7%9F%A5%E8%AF%86-url%E5%A4%84%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h1 id="url处理"><a href="#url处理" class="headerlink" title="url处理"></a>url处理</h1><h3 id="url模块的基本用法"><a href="#url模块的基本用法" class="headerlink" title="url模块的基本用法"></a>url模块的基本用法</h3><p>node.js为互联网而生，和url打交道是无法避免的了，url模块提供一些基础的url处理。</p><h4 id="1-1-parse函数的基础用法"><a href="#1-1-parse函数的基础用法" class="headerlink" title="1.1 parse函数的基础用法"></a>1.1 parse函数的基础用法</h4><ul><li><p>parse函数的作用是解析url</p></li><li><p>返回一个json格式的数组</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> url <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'url'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>url<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token string">'http://www.baidu.com'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul><h5 id="parse函数—条件解析"><a href="#parse函数—条件解析" class="headerlink" title="parse函数—条件解析"></a>parse函数—条件解析</h5><ul><li>parse函数的第二个参数是布尔类型</li><li>当参数为true时，会将查询条件也解析成json格式的对象。</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> url <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'url'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>url<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token string">'http://www.baidu.com?page=1'</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h5 id="parse函数—-解析主机"><a href="#parse函数—-解析主机" class="headerlink" title="parse函数—-解析主机"></a>parse函数—-解析主机</h5><ul><li>parse函数的第三个参数也是布尔类型的</li><li>当参数为true，解析时会将url的”//“和第一个”/“之间的部分解析为主机名</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> url <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'url'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>url<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token string">'http://www.baidu.com/news'</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>较之前面的示例，host的内容不再是null了。</strong></p><h4 id="1-2-format函数的基础用法"><a href="#1-2-format函数的基础用法" class="headerlink" title="1.2 format函数的基础用法"></a>1.2 format函数的基础用法</h4><ul><li>format函数的作用与parse相反</li><li>它的参数是一个JSON对象</li><li>返回一个组装好的url地址</li></ul><p>请看如下示例：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> url <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'url'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>url<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>protocol<span class="token operator">:</span> <span class="token string">'http:'</span><span class="token punctuation">,</span>hostname<span class="token operator">:</span><span class="token string">'www.baidu.com'</span><span class="token punctuation">,</span>port<span class="token operator">:</span><span class="token string">'80'</span><span class="token punctuation">,</span>pathname <span class="token operator">:</span><span class="token string">'/news'</span><span class="token punctuation">,</span>query<span class="token operator">:</span><span class="token punctuation">&#123;</span>page<span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>参数JSON对象的字段跟parse函数解析后返回的JSON字段一一对应。</strong></p><h4 id="1-3-resolve函数的基础用法"><a href="#1-3-resolve函数的基础用法" class="headerlink" title="1.3 resolve函数的基础用法"></a>1.3 resolve函数的基础用法</h4><ul><li>resolve函数的参数是两个路径</li><li>第一个路径是开始的路径或者说当前路径</li><li>第二个则是想要去往的路径</li><li>返回值是一个组装好的url</li></ul><p>示例如下：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> url <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'url'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>url<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'http://example.com/'</span><span class="token punctuation">,</span> <span class="token string">'/one'</span><span class="token punctuation">)</span> <span class="token comment">// 'http://example.com/one'url.resolve('http://example.com/one', '/two') </span><span class="token comment">// 'http://example.com/two'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> node知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> node </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>node--文件I/O</title>
      <link href="2021/04/03/node-%E6%96%87%E4%BB%B6I-O/"/>
      <url>2021/04/03/node-%E6%96%87%E4%BB%B6I-O/</url>
      
        <content type="html"><![CDATA[<h1 id="文件I-O"><a href="#文件I-O" class="headerlink" title="文件I/O"></a>文件I/O</h1><h2 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h2><h2 id="1-fs模块的基本用法"><a href="#1-fs模块的基本用法" class="headerlink" title="1.fs模块的基本用法"></a>1.<strong>fs模块的基本用法</strong></h2><ul><li><p>文件的I/O需求—–node.js中提供了一个名为fs的模块来支持I/O操作</p></li><li><p>fs模块的文件I/O是对标准POSIX函数的简单封装</p></li></ul><h3 id="1-1-writeFile函数的基本用法"><a href="#1-1-writeFile函数的基本用法" class="headerlink" title="1.1 writeFile函数的基本用法"></a>1.1 writeFile函数的基本用法</h3><h4 id="文件I-O-写入"><a href="#文件I-O-写入" class="headerlink" title="文件I/O 写入"></a>文件I/O 写入</h4><h5 id="writeFile函数-fs-writeFile-filename-data-callback"><a href="#writeFile函数-fs-writeFile-filename-data-callback" class="headerlink" title="writeFile函数     fs.writeFile(filename,data,callback)"></a>writeFile函数     fs.writeFile(filename,data,callback)</h5><ul><li>fs模块提供writeFile函数，可以异步的将数据写入一个文件，如果文件存在则会被替换</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> fs<span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"fs"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> fs<span class="token punctuation">.</span><span class="token function">writeFile</span><span class="token punctuation">(</span><span class="token string">'test.txt'</span><span class="token punctuation">,</span> <span class="token string">'Hello Node'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token keyword">throw</span> err<span class="token punctuation">;</span>   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Saved successfully'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//文件被保存</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-2-appendFile函数的基本用法"><a href="#1-2-appendFile函数的基本用法" class="headerlink" title="1.2 appendFile函数的基本用法"></a>1.2 appendFile函数的基本用法</h3><h5 id="appendFile函数-fs-appendFile-文件名，数据，编码，回调函数（err-）"><a href="#appendFile函数-fs-appendFile-文件名，数据，编码，回调函数（err-）" class="headerlink" title="appendFile函数  fs.appendFile(文件名，数据，编码，回调函数（err)）"></a>appendFile函数  fs.appendFile(文件名，数据，编码，回调函数（err)）</h5><ul><li>writeFile函数虽然可以写入文件，但是如果文件已经存在，我们只想添加一部分内容，他就不能满足了</li><li>appendFile函数可以将新的内容追加到已有的文件中</li><li>如果文件不存在，则会创建一个新的文件</li><li>编码格式默认为“utf8”</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> fs<span class="token operator">=</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"fs"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>fs<span class="token punctuation">.</span><span class="token function">appendFile</span><span class="token punctuation">(</span><span class="token string">"text.txt"</span><span class="token punctuation">,</span><span class="token string">"data to append"</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token keyword">throw</span> err<span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'The "data to append" was appended to file!'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-3-exists函数的基本用法"><a href="#1-3-exists函数的基本用法" class="headerlink" title="1.3 exists函数的基本用法"></a>1.3 exists函数的基本用法</h3><h5 id="fs-exists-文件，回调函数（exists-）"><a href="#fs-exists-文件，回调函数（exists-）" class="headerlink" title="fs.exists(文件，回调函数（exists)）"></a>fs.exists(文件，回调函数（exists)）</h5><ul><li>exists的回调函数只有一个参数，类型为布尔值</li><li>通过它表示文件是否存在</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> fs<span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"fs"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> fs<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token string">'/etc/passwd'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">exists</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>exists <span class="token operator">?</span> <span class="token string">"存在"</span> <span class="token operator">:</span> <span class="token string">"不存在!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-4-rename函数的基本用法"><a href="#1-4-rename函数的基本用法" class="headerlink" title="1.4 rename函数的基本用法"></a>1.4 rename函数的基本用法</h3><ul><li>修改文件名称</li><li>rename函数提供修改名称服务</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> fs<span class="token operator">=</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"fs"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>fs<span class="token punctuation">.</span><span class="token function">rename</span><span class="token punctuation">(</span><span class="token function">旧文件，新文件，回调函数</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token keyword">throw</span> err<span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"successful modeification"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>移动文件</li><li>通过rename函数来达到移动文件的目的</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'fs'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> fs<span class="token punctuation">.</span><span class="token function">rename</span><span class="token punctuation">(</span>oldPath<span class="token punctuation">,</span>newPath<span class="token punctuation">,</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token keyword">throw</span> err<span class="token punctuation">;</span>   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'renamed complete'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-5-readFile函数的基本用法"><a href="#1-5-readFile函数的基本用法" class="headerlink" title="1.5 readFile函数的基本用法"></a>1.5 readFile函数的基本用法</h3><h5 id="fs-readFile-文件，编码，回调函数-；"><a href="#fs-readFile-文件，编码，回调函数-；" class="headerlink" title="fs.readFile(文件，编码，回调函数)；"></a>fs.readFile(文件，编码，回调函数)；</h5><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'fs'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span>文件名<span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> data</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token keyword">throw</span> err<span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>回调函数里面的data就是读取的文件内容</strong></p><h3 id="1-6-unlink函数的基本用法"><a href="#1-6-unlink函数的基本用法" class="headerlink" title="1.6 unlink函数的基本用法"></a>1.6 unlink函数的基本用法</h3><h5 id="fs-unlink-文件，回调函数（err-）"><a href="#fs-unlink-文件，回调函数（err-）" class="headerlink" title="fs.unlink(文件，回调函数（err)）"></a>fs.unlink(文件，回调函数（err)）</h5><ul><li><p>删除想删除的文件</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'fs'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> fs<span class="token punctuation">.</span><span class="token function">unlink</span><span class="token punctuation">(</span>文件<span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token keyword">throw</span> err<span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'successfully deleted'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="目录的操作"><a href="#目录的操作" class="headerlink" title="目录的操作"></a>目录的操作</h2><h3 id="2-1-mkdir函数的基本用法"><a href="#2-1-mkdir函数的基本用法" class="headerlink" title="2.1 mkdir函数的基本用法"></a>2.1 mkdir函数的基本用法</h3><h5 id="fs-mkdir-路径，权限，回调函数（err-）"><a href="#fs-mkdir-路径，权限，回调函数（err-）" class="headerlink" title="fs.mkdir(路径，权限，回调函数（err)）"></a>fs.mkdir(路径，权限，回调函数（err)）</h5></li><li><p>创建目录</p></li><li><p>参数</p><ul><li>路径：新创建的目录。</li><li>权限：可选参数，只在linux下有效，表示目录的权限，默认为0777，表示文件所有者、文件所有者所在的组的<em>用户、</em>所有用户，都有权限进行读、写、执行的操作。</li><li>回调函数：当发生错误时，错误信息会传递给回调函数的err参数。</li></ul></li></ul><h3 id="2-2-rmdir函数的基本用法"><a href="#2-2-rmdir函数的基本用法" class="headerlink" title="2.2 rmdir函数的基本用法"></a>2.2 rmdir函数的基本用法</h3><h5 id="fs-rmdir-路径，回调函数（err-）"><a href="#fs-rmdir-路径，回调函数（err-）" class="headerlink" title="fs.rmdir(路径，回调函数（err)）"></a>fs.rmdir(路径，回调函数（err)）</h5><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'fs'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> fs<span class="token punctuation">.</span><span class="token function">rmdir</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token keyword">throw</span> err<span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'ok'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-3-readdir函数的基本用法"><a href="#2-3-readdir函数的基本用法" class="headerlink" title="2.3 readdir函数的基本用法"></a>2.3 readdir函数的基本用法</h3><ul><li>读取目录下所有文件</li><li>readdir函数可以读取到指定目录下所有的文件</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'fs'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> fs<span class="token punctuation">.</span><span class="token function">readdir</span><span class="token punctuation">(</span>目录<span class="token punctuation">,</span><span class="token function">回调函数</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span>files<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>回调函数 (callback) 接受两个参数 (err, files) 其中 files 是一个存储目录中所包含的文件名称的数组，数组中不包括 ‘.’ 和 ‘..’。</strong></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>fs模块不但提供异步的文件操作，还提供相应的同步操作方法，需要指出的是，nodejs采用异步I/O正是为了避免I/O时的等待时间，提高CPU的利用率，所以在选择使用异步或同步方法的时候需要权衡取舍。</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> node知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> node </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ajax---demo</title>
      <link href="2021/04/02/ajax-demo/"/>
      <url>2021/04/02/ajax-demo/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>IE=edge<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=device-width, initial-scale=1.0<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>笑话系统案例<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>./util.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wrap<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">      <span class="token comment">// 接口https://api.apiopen.top/getJoke</span>      <span class="token comment">//详情接口https://api.apiopen.top/getSingleJoke??sid=段子id</span>      util<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>        <span class="token string">"https://api.apiopen.top/getJoke"</span><span class="token punctuation">,</span>        <span class="token keyword">null</span><span class="token punctuation">,</span>        <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">resp</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>resp<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">var</span> html <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>          resp<span class="token punctuation">.</span>result<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            html <span class="token operator">+=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">                &lt;li>                    &lt;h3></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>item<span class="token punctuation">.</span>text<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">&lt;/h3>                    &lt;button data-id='</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>item<span class="token punctuation">.</span>sid<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">'>查看作者&lt;/button>                    &lt;/li></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment">//   自定义事件 data-id='$&#123;item.sid&#125;</span>          document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">"#wrap"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> html<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token boolean">true</span>      <span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">//   事件委托，绑定异步操作里面的button</span>      document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">"#wrap"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">var</span> target <span class="token operator">=</span> e<span class="token punctuation">.</span>target<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>target<span class="token punctuation">.</span>tagName <span class="token operator">===</span> <span class="token string">"BUTTON"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token comment">// 获取自定义属性  自定义事件 data-id='$&#123;item.sid&#125;</span>          <span class="token keyword">var</span> sid <span class="token operator">=</span> target<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">"data-id"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          util<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>            <span class="token string">"https://api.apiopen.top/getSingleJoke"</span><span class="token punctuation">,</span>            <span class="token punctuation">&#123;</span> sid<span class="token operator">:</span> sid <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">resp</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>              console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>resp<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token comment">// 拿到作者名字 放进name容器</span>              <span class="token keyword">var</span> name <span class="token operator">=</span> resp<span class="token punctuation">.</span>result<span class="token punctuation">.</span>name<span class="token punctuation">;</span>              <span class="token comment">//找到父级li,插入作者信息</span>              <span class="token keyword">var</span> p<span class="token operator">=</span>document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'p'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              p<span class="token punctuation">.</span>innerHTML<span class="token operator">=</span>name<span class="token punctuation">;</span>              target<span class="token punctuation">.</span>parentNode<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token boolean">true</span>          <span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment">//true 是json、转化json格式</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>js部分<br>文件名：<code>util.js</code> 与上面引入的js名一致</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// query:Object请求携带的参数</span><span class="token keyword">var</span> util <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token function-variable function">get</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">url<span class="token punctuation">,</span> query<span class="token punctuation">,</span> callback<span class="token punctuation">,</span> isJson</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>query<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      url <span class="token operator">+=</span> <span class="token string">"?"</span><span class="token punctuation">;</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> key <span class="token keyword">in</span> query<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        url <span class="token operator">+=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>key<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>query<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">&amp;</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token comment">//取出多余&amp;</span>      url <span class="token operator">=</span> url<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">var</span> xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"get"</span><span class="token punctuation">,</span> url<span class="token punctuation">)</span><span class="token punctuation">;</span>    xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    xhr<span class="token punctuation">.</span><span class="token function-variable function">onreadystatechange</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>readyState <span class="token operator">===</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">var</span> res <span class="token operator">=</span> isJson <span class="token operator">?</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>responseText<span class="token punctuation">)</span> <span class="token operator">:</span> xhr<span class="token punctuation">.</span>responseText<span class="token punctuation">;</span>          <span class="token function">callback</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token function-variable function">post</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">url<span class="token punctuation">,</span> query<span class="token punctuation">,</span> callback<span class="token punctuation">,</span> isJson</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//如果有参数，把参数拼接起来</span>    <span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>query<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> key <span class="token keyword">in</span> query<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        str <span class="token operator">+=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>key<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>query<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">&amp;</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      str <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">var</span> xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"post"</span><span class="token punctuation">,</span> url<span class="token punctuation">)</span><span class="token punctuation">;</span>    xhr<span class="token punctuation">.</span><span class="token function">setRequestHeader</span><span class="token punctuation">(</span><span class="token string">"Content-Type"</span><span class="token punctuation">,</span> <span class="token string">"application/x-www-form-urlencoded"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>    xhr<span class="token punctuation">.</span><span class="token function-variable function">onreadystatechange</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>readyState <span class="token operator">===</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">var</span> res <span class="token operator">=</span> isJson <span class="token operator">?</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>responseText<span class="token punctuation">)</span> <span class="token operator">:</span> xhr<span class="token punctuation">.</span>responseText<span class="token punctuation">;</span>          <span class="token function">callback</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token comment">// params:Object:&#123;method,url,query,callback,isJson&#125;</span>  <span class="token function-variable function">ajax</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">params</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>params<span class="token punctuation">.</span>method<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">"get"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>params<span class="token punctuation">.</span>query<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        url <span class="token operator">+=</span> <span class="token string">"?"</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> key <span class="token keyword">in</span> params<span class="token punctuation">.</span>query<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          url <span class="token operator">+=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>key<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>params<span class="token punctuation">.</span>query<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">&amp;</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        params<span class="token punctuation">.</span>url <span class="token operator">=</span>params<span class="token punctuation">.</span>url<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">'get'</span><span class="token punctuation">,</span> params<span class="token punctuation">.</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>      xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>        <span class="token comment">//post</span>        <span class="token keyword">var</span> str<span class="token operator">=</span><span class="token string">''</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>params<span class="token punctuation">.</span>query<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> key <span class="token keyword">in</span> params<span class="token punctuation">.</span>query<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                str<span class="token operator">+=</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>key<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>params<span class="token punctuation">.</span>query<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">&amp;</span><span class="token template-punctuation string">`</span></span>            <span class="token punctuation">&#125;</span>            str<span class="token operator">=</span>str<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>        xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">'post'</span><span class="token punctuation">,</span>params<span class="token punctuation">.</span>url<span class="token punctuation">)</span>        xhr<span class="token punctuation">.</span><span class="token function">setRequestHeader</span><span class="token punctuation">(</span><span class="token string">'Content-Type'</span><span class="token punctuation">,</span><span class="token string">'application/x-www-form-urlencoded'</span><span class="token punctuation">)</span>        xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    xhr<span class="token punctuation">.</span><span class="token function-variable function">onreadystatechange</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>readyState<span class="token operator">===</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>status<span class="token operator">===</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">var</span> resp<span class="token operator">=</span>params<span class="token punctuation">.</span>isJson<span class="token operator">?</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>responseText<span class="token punctuation">)</span><span class="token operator">:</span>xhr<span class="token punctuation">.</span>responseText                params<span class="token punctuation">.</span><span class="token function">callback</span><span class="token punctuation">(</span>resp<span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">// util.ajax(&#123;</span><span class="token comment">//     method:'post',</span><span class="token comment">//     url:'xxx/xxx',</span><span class="token comment">//     query:&#123;id:3,title:'xiaoming'&#125;,</span><span class="token comment">//     callback:function(resp)&#123;</span><span class="token comment">//         console.log(resp)</span><span class="token comment">//     &#125;,</span><span class="token comment">//     isJson:true</span><span class="token comment">// &#125;)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="基于promise的封装ajax请求"><a href="#基于promise的封装ajax请求" class="headerlink" title="基于promise的封装ajax请求"></a>基于promise的封装ajax请求</h2><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>IE=edge<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=device-width, initial-scale=1.0<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>笑话系统案例<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>./util.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wrap<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">      <span class="token comment">// 接口https://api.apiopen.top/getJoke</span>      <span class="token comment">//详情接口https://api.apiopen.top/getSingleJoke??sid=段子id</span>      util<span class="token punctuation">.</span><span class="token function">fetch</span><span class="token punctuation">(</span>        <span class="token string">"https://api.apiopen.top/getJoke"</span><span class="token punctuation">,</span>        <span class="token keyword">null</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>  <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">resp</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>resp<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">var</span> html <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>          resp<span class="token punctuation">.</span>result<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            html <span class="token operator">+=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">                &lt;li>                    &lt;h3></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>item<span class="token punctuation">.</span>text<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">&lt;/h3>                    &lt;button data-id='</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>item<span class="token punctuation">.</span>sid<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">'>查看作者&lt;/button>                    &lt;/li></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment">//   自定义事件 data-id='$&#123;item.sid&#125;</span>          document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">"#wrap"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> html<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">)</span>            <span class="token comment">//   事件委托，绑定异步操作里面的button</span>      document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">"#wrap"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">var</span> target <span class="token operator">=</span> e<span class="token punctuation">.</span>target<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>target<span class="token punctuation">.</span>tagName <span class="token operator">===</span> <span class="token string">"BUTTON"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token comment">// 获取自定义属性  自定义事件 data-id='$&#123;item.sid&#125;</span>          <span class="token keyword">var</span> sid <span class="token operator">=</span> target<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">"data-id"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          util<span class="token punctuation">.</span><span class="token function">fetch</span><span class="token punctuation">(</span>            <span class="token string">"https://api.apiopen.top/getSingleJoke"</span><span class="token punctuation">,</span>            <span class="token punctuation">&#123;</span> sid<span class="token operator">:</span> sid <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>   <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">resp</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>              console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>resp<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token comment">// 拿到作者名字 放进name容器</span>              <span class="token keyword">var</span> name <span class="token operator">=</span> resp<span class="token punctuation">.</span>result<span class="token punctuation">.</span>name<span class="token punctuation">;</span>              <span class="token comment">//找到父级li,插入作者信息</span>              <span class="token keyword">var</span> p<span class="token operator">=</span>document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'p'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              p<span class="token punctuation">.</span>innerHTML<span class="token operator">=</span>name<span class="token punctuation">;</span>              target<span class="token punctuation">.</span>parentNode<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token punctuation">)</span>                   <span class="token comment">//true 是json、转化json格式</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>js部分</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// query:Object请求携带的参数</span><span class="token keyword">var</span> util <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token function-variable function">get</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">url<span class="token punctuation">,</span> query<span class="token punctuation">,</span> callback<span class="token punctuation">,</span> isJson</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>query<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      url <span class="token operator">+=</span> <span class="token string">"?"</span><span class="token punctuation">;</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> key <span class="token keyword">in</span> query<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        url <span class="token operator">+=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>key<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>query<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">&amp;</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token comment">//取出多余&amp;</span>      url <span class="token operator">=</span> url<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">var</span> xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"get"</span><span class="token punctuation">,</span> url<span class="token punctuation">)</span><span class="token punctuation">;</span>    xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    xhr<span class="token punctuation">.</span><span class="token function-variable function">onreadystatechange</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>readyState <span class="token operator">===</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">var</span> res <span class="token operator">=</span> isJson <span class="token operator">?</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>responseText<span class="token punctuation">)</span> <span class="token operator">:</span> xhr<span class="token punctuation">.</span>responseText<span class="token punctuation">;</span>          <span class="token function">callback</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token function-variable function">post</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">url<span class="token punctuation">,</span> query<span class="token punctuation">,</span> callback<span class="token punctuation">,</span> isJson</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//如果有参数，把参数拼接起来</span>    <span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>query<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> key <span class="token keyword">in</span> query<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        str <span class="token operator">+=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>key<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>query<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">&amp;</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      str <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">var</span> xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"post"</span><span class="token punctuation">,</span> url<span class="token punctuation">)</span><span class="token punctuation">;</span>    xhr<span class="token punctuation">.</span><span class="token function">setRequestHeader</span><span class="token punctuation">(</span><span class="token string">"Content-Type"</span><span class="token punctuation">,</span> <span class="token string">"application/x-www-form-urlencoded"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>    xhr<span class="token punctuation">.</span><span class="token function-variable function">onreadystatechange</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>readyState <span class="token operator">===</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">var</span> res <span class="token operator">=</span> isJson <span class="token operator">?</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>responseText<span class="token punctuation">)</span> <span class="token operator">:</span> xhr<span class="token punctuation">.</span>responseText<span class="token punctuation">;</span>          <span class="token function">callback</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token comment">// params:Object:&#123;method,url,query,callback,isJson&#125;</span>  <span class="token function-variable function">ajax</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">params</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>params<span class="token punctuation">.</span>method<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">"get"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>params<span class="token punctuation">.</span>query<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        url <span class="token operator">+=</span> <span class="token string">"?"</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> key <span class="token keyword">in</span> params<span class="token punctuation">.</span>query<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          url <span class="token operator">+=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>key<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>params<span class="token punctuation">.</span>query<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">&amp;</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        params<span class="token punctuation">.</span>url <span class="token operator">=</span>params<span class="token punctuation">.</span>url<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">'get'</span><span class="token punctuation">,</span> params<span class="token punctuation">.</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>      xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>        <span class="token comment">//post</span>        <span class="token keyword">var</span> str<span class="token operator">=</span><span class="token string">''</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>params<span class="token punctuation">.</span>query<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> key <span class="token keyword">in</span> params<span class="token punctuation">.</span>query<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                str<span class="token operator">+=</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>key<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>params<span class="token punctuation">.</span>query<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">&amp;</span><span class="token template-punctuation string">`</span></span>            <span class="token punctuation">&#125;</span>            str<span class="token operator">=</span>str<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>        xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">'post'</span><span class="token punctuation">,</span>params<span class="token punctuation">.</span>url<span class="token punctuation">)</span>        xhr<span class="token punctuation">.</span><span class="token function">setRequestHeader</span><span class="token punctuation">(</span><span class="token string">'Content-Type'</span><span class="token punctuation">,</span><span class="token string">'application/x-www-form-urlencoded'</span><span class="token punctuation">)</span>        xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    xhr<span class="token punctuation">.</span><span class="token function-variable function">onreadystatechange</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>readyState<span class="token operator">===</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>status<span class="token operator">===</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">var</span> resp<span class="token operator">=</span>params<span class="token punctuation">.</span>isJson<span class="token operator">?</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>responseText<span class="token punctuation">)</span><span class="token operator">:</span>xhr<span class="token punctuation">.</span>responseText                params<span class="token punctuation">.</span><span class="token function">callback</span><span class="token punctuation">(</span>resp<span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token comment">// 基于promise的get请求</span><span class="token function-variable function">fetch</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">url<span class="token punctuation">,</span>query<span class="token punctuation">,</span>isJson</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>query<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        url<span class="token operator">+=</span><span class="token string">'?'</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> key <span class="token keyword">in</span> query<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            url<span class="token operator">+=</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>key<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>query<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">&amp;</span><span class="token template-punctuation string">`</span></span>        <span class="token punctuation">&#125;</span>        url<span class="token operator">=</span>url<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span>reject</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">var</span> xhr<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">'get'</span><span class="token punctuation">,</span>url<span class="token punctuation">)</span>        xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        xhr<span class="token punctuation">.</span><span class="token function-variable function">onreadystatechange</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>readyState<span class="token operator">===</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>status<span class="token operator">===</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    <span class="token keyword">var</span> resp<span class="token operator">=</span>isJson<span class="token operator">?</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>responseText<span class="token punctuation">)</span><span class="token operator">:</span>xhr<span class="token punctuation">.</span>responseText                    <span class="token function">resolve</span><span class="token punctuation">(</span>resp<span class="token punctuation">)</span>                <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>                    <span class="token function">reject</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">// util.ajax(&#123;</span><span class="token comment">//     method:'post',</span><span class="token comment">//     url:'xxx/xxx',</span><span class="token comment">//     query:&#123;id:3,title:'xiaoming'&#125;,</span><span class="token comment">//     callback:function(resp)&#123;</span><span class="token comment">//         console.log(resp)</span><span class="token comment">//     &#125;,</span><span class="token comment">//     isJson:true</span><span class="token comment">// &#125;)</span><span class="token comment">// 把异步代码写成同步形式，不用传回调函数了，而是在then里处理成功</span><span class="token comment">// util.fetch('地址',&#123;id:3&#125;,true.then(function(resp)&#123;console.log(resp)&#125;))</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> 前端JavaScirpt知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ajax </tag>
            
            <tag> 前端 </tag>
            
            <tag> JavaScript </tag>
            
            <tag> 前端知识 </tag>
            
            <tag> ES6 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ajax网络请求--fetch--一个笑话小例子</title>
      <link href="2021/04/02/ajax-fetch-%E4%B8%80%E4%B8%AA%E7%AC%91%E8%AF%9D%E5%B0%8F%E4%BE%8B%E5%AD%90/"/>
      <url>2021/04/02/ajax-fetch-%E4%B8%80%E4%B8%AA%E7%AC%91%E8%AF%9D%E5%B0%8F%E4%BE%8B%E5%AD%90/</url>
      
        <content type="html"><![CDATA[<p>GET:</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">'http://example.com/movies.json'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">response</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> response<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">myJson</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>myJson<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>POST:</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token punctuation">&#123;</span>id<span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">,</span>title<span class="token operator">:</span><span class="token string">'abc'</span><span class="token punctuation">&#125;</span><span class="token function">fetch</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span><span class="token punctuation">&#123;</span>    body<span class="token operator">:</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">,</span>    method<span class="token operator">:</span><span class="token string">'POST'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">response</span><span class="token operator">=></span>response<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">myJson</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>    <span class="token function">console</span><span class="token punctuation">(</span>myJson<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>优点：</p><ol><li>无需插件支持</li><li>获取资源的接口</li><li>比XMLHttprequest更好用</li><li>返回一个promise</li><li>避免回调</li><li>并不会因为状态码错误而reject</li></ol><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>IE=edge<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=device-width, initial-scale=1.0<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>笑话系统案例<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wrap<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">      <span class="token comment">// 接口https://api.apiopen.top/getJoke</span>      <span class="token comment">//详情接口https://api.apiopen.top/getSingleJoke??sid=段子id</span>      <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">"https://api.apiopen.top/getJoke"</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">resp</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">return</span> resp<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">resp</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>resp<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">var</span> html <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>          resp<span class="token punctuation">.</span>result<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            html <span class="token operator">+=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">                &lt;li>                    &lt;h3></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>item<span class="token punctuation">.</span>text<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">&lt;/h3>                    &lt;button data-id='</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>item<span class="token punctuation">.</span>sid<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">'>查看作者&lt;/button>                    &lt;/li></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment">//   自定义事件 data-id='$&#123;item.sid&#125;</span>          document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">"#wrap"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> html<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">//   事件委托，绑定异步操作里面的button</span>      document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">"#wrap"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">var</span> target <span class="token operator">=</span> e<span class="token punctuation">.</span>target<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>target<span class="token punctuation">.</span>tagName <span class="token operator">===</span> <span class="token string">"BUTTON"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token comment">// 获取自定义属性  自定义事件 data-id='$&#123;item.sid&#125;</span>          <span class="token keyword">var</span> sid <span class="token operator">=</span> target<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">"data-id"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">https://api.apiopen.top/getSingleJoke?sid=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>sid<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">resp</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>              <span class="token keyword">return</span> resp<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">resp</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>              console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>resp<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token comment">// 拿到作者名字 放进name容器</span>              <span class="token keyword">var</span> name <span class="token operator">=</span> resp<span class="token punctuation">.</span>result<span class="token punctuation">.</span>name<span class="token punctuation">;</span>              <span class="token comment">//找到父级li,插入作者信息</span>              <span class="token keyword">var</span> p <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">"p"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              p<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> name<span class="token punctuation">;</span>              target<span class="token punctuation">.</span>parentNode<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment">//true 是json、转化json格式</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> 前端JavaScirpt知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ajax </tag>
            
            <tag> 前端 </tag>
            
            <tag> JavaScript </tag>
            
            <tag> 前端知识 </tag>
            
            <tag> ES6 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>margin的父子上下传递和上下折叠问题</title>
      <link href="2021/04/02/margin%E7%9A%84%E7%88%B6%E5%AD%90%E4%B8%8A%E4%B8%8B%E4%BC%A0%E9%80%92%E5%92%8C%E4%B8%8A%E4%B8%8B%E6%8A%98%E5%8F%A0%E9%97%AE%E9%A2%98/"/>
      <url>2021/04/02/margin%E7%9A%84%E7%88%B6%E5%AD%90%E4%B8%8A%E4%B8%8B%E4%BC%A0%E9%80%92%E5%92%8C%E4%B8%8A%E4%B8%8B%E6%8A%98%E5%8F%A0%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h1 id="margin的父子上下传递"><a href="#margin的父子上下传递" class="headerlink" title="margin的父子上下传递"></a>margin的父子上下传递</h1><p>左右不会传递</p><h2 id="margin-top传递"><a href="#margin-top传递" class="headerlink" title="margin -top传递"></a>margin -top传递</h2><p>如果 <strong>块级</strong>元素的<strong>顶部线</strong>和父元素的<strong>顶部线</strong>重叠，那么这个 <strong>块级</strong>元素的margin-top值会传递给父元素</p><h2 id="margin-bottom传递"><a href="#margin-bottom传递" class="headerlink" title="margin-bottom传递"></a>margin-bottom传递</h2><p>如果 <strong>块级</strong>元素的<strong>底部线</strong>和父元素的<strong>底部线</strong>重叠，并且父元素的高度是auto，那么这个 <strong>块级</strong>元素的margin-bottom会传递给父元素</p><h2 id="如何防止出现传递问题"><a href="#如何防止出现传递问题" class="headerlink" title="如何防止出现传递问题"></a>如何防止出现传递问题</h2><ol><li>给父元素设置 padding-top、padding-bottom</li><li>给父元素设置 border</li><li>触发BFC: 设置overflow为auto\hidden</li></ol><p><strong>建议：</strong></p><p>margin一般用来设置兄弟元素之间的间距</p><p>padding一般用来设置父子之间的间距</p><h5 id="如何触发BFC："><a href="#如何触发BFC：" class="headerlink" title="如何触发BFC："></a>如何触发BFC：</h5><p>bfc相当于一个结界</p><ul><li>浮动触发</li><li>设置一个元素的overflow为非visible<ul><li>hidden</li><li>auto</li><li>scroll</li></ul></li></ul><h2 id="上下margin折叠"><a href="#上下margin折叠" class="headerlink" title="上下margin折叠"></a>上下margin折叠</h2><p>垂直方向上相邻的2个margin（margin-top、margin-bottom）有可能会合并为1个margin，这种现象叫做collapse（折叠）</p><p>水平方向上的永远不会折叠</p><p><strong>折叠后的计算规则</strong></p><p>两个值进行比较，取较大的值</p><p><strong>如何防止折叠</strong></p><p>只设置其中一个元素的margin</p><p><img src="https://cdn.jsdelivr.net/gh/fuyanz/picture@main/image/blogphoto/1617375748186-1617375748178.png"></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> 前端CSS知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> 前端知识 </tag>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>居中布局的方法</title>
      <link href="2021/04/02/%E5%B1%85%E4%B8%AD%E5%B8%83%E5%B1%80%E7%9A%84%E6%96%B9%E6%B3%95/"/>
      <url>2021/04/02/%E5%B1%85%E4%B8%AD%E5%B8%83%E5%B1%80%E7%9A%84%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h2 id="基础居中布局"><a href="#基础居中布局" class="headerlink" title="基础居中布局"></a>基础居中布局</h2><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">      <span class="token selector">.wrap</span><span class="token punctuation">&#123;</span>        <span class="token property">width</span><span class="token punctuation">:</span>1000px<span class="token punctuation">;</span>        <span class="token property">margin</span><span class="token punctuation">:</span>0 auto<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>nav wrap<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>header wrap<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>footer wrap<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="无论屏幕大小多少，都能看到中间的主要内容并居中显示"><a href="#无论屏幕大小多少，都能看到中间的主要内容并居中显示" class="headerlink" title="无论屏幕大小多少，都能看到中间的主要内容并居中显示"></a>无论屏幕大小多少，都能看到中间的主要内容并居中显示</h2><h3 id="背景居中"><a href="#背景居中" class="headerlink" title="背景居中"></a>背景居中</h3><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">    <span class="token selector">body</span><span class="token punctuation">&#123;</span>        <span class="token property">margin</span><span class="token punctuation">:</span>0<span class="token punctuation">;</span>        <span class="token property">padding</span><span class="token punctuation">:</span>0<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token selector">.box</span><span class="token punctuation">&#123;</span>        <span class="token property">height</span><span class="token punctuation">:</span>400px<span class="token punctuation">;</span>        min-width：1000px<span class="token punctuation">;</span>        <span class="token property">background-image</span><span class="token punctuation">:</span>图片地址<span class="token punctuation">;</span>        <span class="token property">background-position</span><span class="token punctuation">:</span>center -80px<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>box<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>有缺点，关键为center</p><p>##img定位</p><p>假设图片大小：1920x高</p><p>希望图片向左移动的距离：</p><p>​    = 图片宽度乘0.5 - div宽度乘0.5</p><p>​    =960px - div宽度*0.5</p><p>解释：<br><img src="https://cdn.jsdelivr.net/gh/fuyanz/picture@main/image/blogphoto/1617373737303-1617373737296.png"><br><code>向左移动img的一半,向右移动父元素的一半</code></p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">    <span class="token selector">body</span><span class="token punctuation">&#123;</span>        <span class="token property">margin</span><span class="token punctuation">:</span>0<span class="token punctuation">;</span>        <span class="token property">padding</span><span class="token punctuation">:</span>0<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token selector">.box</span><span class="token punctuation">&#123;</span>        <span class="token property">overflow</span><span class="token punctuation">:</span>hidden<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token selector">.box img</span><span class="token punctuation">&#123;</span>        <span class="token comment">/*向左移动img的一半*/</span>        <span class="token property">position</span><span class="token punctuation">:</span>relative<span class="token punctuation">;</span>        left：-960px<span class="token punctuation">;</span><span class="token comment">/*transform:translate(-50%);*/</span>         <span class="token comment">/*向右移动父元素（.box)的一半*/</span>        <span class="token property">margin-left</span><span class="token punctuation">:</span>50%<span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>box<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>图片地址<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> 前端JavaScirpt知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> JavaScript </tag>
            
            <tag> 前端知识 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>line-height</title>
      <link href="2021/04/02/line-height/"/>
      <url>2021/04/02/line-height/</url>
      
        <content type="html"><![CDATA[<p>设置文本的最小行高</p><p>行高可以理解为一行文字所占据的高度</p><p>两行文字baseline之间的间距<br><img src="https://cdn.jsdelivr.net/gh/fuyanz/picture@main/image/blogphoto/1617372996749-1617372996723.png"></p><h4 id="应用实例：假设div中只有一行文字让文字在div内部垂直居中"><a href="#应用实例：假设div中只有一行文字让文字在div内部垂直居中" class="headerlink" title="应用实例：假设div中只有一行文字让文字在div内部垂直居中"></a>应用实例：假设div中只有一行文字<code>让文字在div内部垂直居中</code></h4><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">    <span class="token selector">div</span><span class="token punctuation">&#123;</span>    <span class="token property">height</span><span class="token punctuation">:</span>200px<span class="token punctuation">;</span>    <span class="token property">line-height</span><span class="token punctuation">:</span>200px<span class="token punctuation">;</span>    <span class="token property">background-color</span><span class="token punctuation">:</span>red<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>  一行文字<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>line-height=文字的高度+行距</p><p>上下行距平分</p><p><code>行高等于height的时候</code>文字居中</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> 前端CSS知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> 前端知识 </tag>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript---理解原型与原型链</title>
      <link href="2021/04/02/JavaScript-%E7%90%86%E8%A7%A3%E5%8E%9F%E5%9E%8B%E4%B8%8E%E5%8E%9F%E5%9E%8B%E9%93%BE/"/>
      <url>2021/04/02/JavaScript-%E7%90%86%E8%A7%A3%E5%8E%9F%E5%9E%8B%E4%B8%8E%E5%8E%9F%E5%9E%8B%E9%93%BE/</url>
      
        <content type="html"><![CDATA[<p><strong>所有对象都有<code>_proto_</code>属性，但是只有函数拥有<code>prototype</code></strong><br><strong><code>_proto_</code><strong>是一个访问器属性，它指向的是</strong>它的构造函数的原型<code>prototype</code></strong><br>能通过<code>prototype</code>给函数添加<strong>原型属性</strong><br>而实例能通过<code>_proto_</code>访问构造函数的原型或方法。</p><p>每一个函数都属于原始构造函数<code>function</code>的实例，而每一个函数又能作为构造函数生产属于自己的实例</p><p>##js获取原型的方法</p><pre class="line-numbers language-js" data-language="js"><code class="language-js">p<span class="token punctuation">.</span>__proto__p<span class="token punctuation">.</span>constructor<span class="token punctuation">.</span>prototypeObject<span class="token punctuation">.</span><span class="token function">getPrototypeOf</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> 前端JavaScirpt知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> JavaScript </tag>
            
            <tag> 前端知识 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>flex弹性布局</title>
      <link href="2021/04/02/flex%E5%BC%B9%E6%80%A7%E5%B8%83%E5%B1%80/"/>
      <url>2021/04/02/flex%E5%BC%B9%E6%80%A7%E5%B8%83%E5%B1%80/</url>
      
        <content type="html"><![CDATA[<h1 id="弹性布局"><a href="#弹性布局" class="headerlink" title="弹性布局"></a>弹性布局</h1><p>主要在移动端使用，目前pc端也在使用</p><p>🐇开启了flex布局的元素叫 <code>flex container</code></p><p>🐇flex container 里面的直接子元素叫做 <code>flex items</code></p><p>🐕设置display属性为flex或者inline-flex可以成为 flex container</p><p>🎄flex：flex container 以block-level的形式存在</p><p>🎄inline-flex：flex container 以inline-level的形式存在</p><h2 id="flex布局模型"><a href="#flex布局模型" class="headerlink" title="flex布局模型"></a>flex布局模型</h2><p>⭐横方向：叫主轴 main axis</p><p>⭐竖方向：叫交叉轴 cross axis</p><h3 id="应用在flex-container上的css属性"><a href="#应用在flex-container上的css属性" class="headerlink" title="应用在flex container上的css属性"></a>应用在flex container上的css属性</h3><ul><li>flex-flow</li><li>flex-direction</li><li>flex-wrap</li><li>justify-content</li><li>align-items</li><li>align-content</li></ul><h4 id="flex-direction"><a href="#flex-direction" class="headerlink" title="flex-direction"></a>flex-direction</h4><p>flex items 默认是沿着main axis（主轴）从main start 开始向main end的方向排布</p><p><code>决定了main axis的方向</code></p><p><img src="https://cdn.jsdelivr.net/gh/fuyanz/picture@main/image/blogphoto/1617348934203-1617348934200.png"></p><h4 id="justify-content"><a href="#justify-content" class="headerlink" title="justify-content"></a>justify-content</h4><p><code>决定了flex items在main axis上的对其方式</code><br><img src="https://cdn.jsdelivr.net/gh/fuyanz/picture@main/image/blogphoto/1617348823929-1617348823924.png"></p><p><img src="https://cdn.jsdelivr.net/gh/fuyanz/picture@main/image/blogphoto/1617348708838-1617348708831.png"></p><h4 id="align-items"><a href="#align-items" class="headerlink" title="align-items"></a>align-items</h4><p><code>align-items决定了flex items在cross axis上的对齐方式</code><br><img src="https://cdn.jsdelivr.net/gh/fuyanz/picture@main/image/blogphoto/1617348848175-1617348848171.png"><br><img src="https://cdn.jsdelivr.net/gh/fuyanz/picture@main/image/blogphoto/1617348751891-1617348751883.png"></p><h4 id="flex-wrap"><a href="#flex-wrap" class="headerlink" title="flex-wrap"></a>flex-wrap</h4><p><code>flex-wrap决定了flex container 是单行还是多行</code></p><p>默认情况下，所有的flex items都会在同一行显示<br><img src="https://cdn.jsdelivr.net/gh/fuyanz/picture@main/image/blogphoto/1617348978460-1617348978457.png"></p><h4 id="align-content"><a href="#align-content" class="headerlink" title="align-content"></a>align-content</h4><p><code>align-content决定了多行flex items在cross axis上的对齐方式，用法uijustify-content类似</code><br><img src="https://cdn.jsdelivr.net/gh/fuyanz/picture@main/image/blogphoto/1617349023856-1617349023850.png"></p><h2 id="应用在flex-items-上的css属性"><a href="#应用在flex-items-上的css属性" class="headerlink" title="应用在flex items 上的css属性"></a>应用在flex items 上的css属性</h2><ul><li>flex</li><li>flex-grow</li><li>flex-basis</li><li>flex-shrink</li><li>order</li><li>align-self</li></ul><h4 id="order"><a href="#order" class="headerlink" title="order"></a>order</h4><p><code>order决定了flex items的排布顺序</code></p><p>​    可以设置任意整数（正整数，负整数，0），值越小就越排在前面</p><p>​    默认是0</p><h4 id="align-self"><a href="#align-self" class="headerlink" title="align-self"></a>align-self</h4><p><code>flex items可以通过align-self覆盖flex container设置的align-items</code></p><p>​    auto: 默认值，遵从flex container的align-items设置</p><p>​    stretch、flex-start、flex-end、center、baseline，效果和align-items一致</p><h4 id="flex-grow"><a href="#flex-grow" class="headerlink" title="flex-grow"></a>flex-grow</h4><p><code>flex-grow决定了flex items如何扩展</code></p><p><img src="https://cdn.jsdelivr.net/gh/fuyanz/picture@main/image/blogphoto/1617349799870-1617349799866.png"></p><h4 id="flex-shrink"><a href="#flex-shrink" class="headerlink" title="flex-shrink"></a>flex-shrink</h4><p><code>flex-shrink决定了flex items如何收缩</code><br><img src="https://cdn.jsdelivr.net/gh/fuyanz/picture@main/image/blogphoto/1617349859697-1617349859691.png"></p><h4 id="flex-basis"><a href="#flex-basis" class="headerlink" title="flex-basis"></a>flex-basis</h4><p><code>flex-basis用来设置flex items在main axis方向上的 base size</code><br><img src="https://cdn.jsdelivr.net/gh/fuyanz/picture@main/image/blogphoto/1617349880708-1617349880705.png"></p><h2 id="⭐flex"><a href="#⭐flex" class="headerlink" title="⭐flex"></a>⭐flex</h2><p><img src="https://cdn.jsdelivr.net/gh/fuyanz/picture@main/image/blogphoto/1617349900251-1617349900244.png"></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> flex </category>
          
          <category> 前端布局知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> flex </tag>
            
            <tag> 前端 </tag>
            
            <tag> 前端布局知识 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ajax发起网络请求---手写的三种方式</title>
      <link href="2021/04/02/Ajax%E5%8F%91%E9%80%81%E7%BD%91%E7%BB%9C%E8%AF%B7%E6%B1%82-%E6%89%8B%E5%86%99%E7%9A%84%E4%B8%89%E7%A7%8D%E6%96%B9%E5%BC%8F/"/>
      <url>2021/04/02/Ajax%E5%8F%91%E9%80%81%E7%BD%91%E7%BB%9C%E8%AF%B7%E6%B1%82-%E6%89%8B%E5%86%99%E7%9A%84%E4%B8%89%E7%A7%8D%E6%96%B9%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<p>我们需要熟练掌握ajax发送网络请求。这里是发起网络请求的三种方式：<br>    原生js发送ajax网络请求<br>    JQuery发送ajax网络请求<br>    promise封装发送ajax网络请求</p><hr><h2 id="原生js发送ajax请求"><a href="#原生js发送ajax请求" class="headerlink" title="原生js发送ajax请求"></a>原生js发送ajax请求</h2><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//1：创建Ajax对象</span><span class="token keyword">var</span> xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">xmlHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//2：配置 Ajax请求地址</span>xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span>请求方式<span class="token punctuation">,</span>url<span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//3：发送请求</span>xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//4:监听请求，接受响应</span>xhr<span class="token punctuation">.</span><span class="token function-variable function">onloadend</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>     <span class="token keyword">if</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>status<span class="token operator">==</span><span class="token number">200</span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="JQuery发送ajax网络请求"><a href="#JQuery发送ajax网络请求" class="headerlink" title="JQuery发送ajax网络请求"></a>JQuery发送ajax网络请求</h2><pre class="line-numbers language-js" data-language="js"><code class="language-js">$<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>          type<span class="token operator">:</span><span class="token string">'post'</span><span class="token punctuation">,</span>          url<span class="token operator">:</span><span class="token string">''</span><span class="token punctuation">,</span>          data<span class="token operator">:</span>data<span class="token punctuation">,</span>          dataType<span class="token operator">:</span><span class="token string">'json'</span><span class="token punctuation">,</span>          <span class="token function-variable function">success</span><span class="token operator">:</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">msg</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>          <span class="token function-variable function">error</span><span class="token operator">:</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token punctuation">&#125;</span>          <span class="token function-variable function">complete</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                  <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="promise封装实现ajax网络请求"><a href="#promise封装实现ajax网络请求" class="headerlink" title="promise封装实现ajax网络请求"></a>promise封装实现ajax网络请求</h2><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">getJSON</span><span class="token punctuation">(</span><span class="token parameter">url</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 创建一个 promise 对象</span>  <span class="token keyword">let</span> promise <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>   <span class="token keyword">let</span> xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 新建一个 http 请求</span>   xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"GET"</span><span class="token punctuation">,</span> url<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 设置状态的监听函数</span>    xhr<span class="token punctuation">.</span><span class="token function-variable function">onloadend</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// 当请求成功或失败时，改变 promise 的状态</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">resolve</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token function">reject</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token comment">// 设置错误监听函数</span>    xhr<span class="token punctuation">.</span><span class="token function-variable function">onerror</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token function">reject</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>statusText<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token comment">// 设置响应的数据类型</span>    xhr<span class="token punctuation">.</span>responseType <span class="token operator">=</span> <span class="token string">"json"</span><span class="token punctuation">;</span>    <span class="token comment">// 设置请求头信息</span>    xhr<span class="token punctuation">.</span><span class="token function">setRequestHeader</span><span class="token punctuation">(</span><span class="token string">"content-type"</span><span class="token punctuation">,</span> <span class="token string">"application/json"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 发送 http 请求</span>    xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> promise<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> ajax </category>
          
          <category> 发起网络请求 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ajax </tag>
            
            <tag> 前端笔记-ajax </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>欢迎来到flyall的空间~</title>
      <link href="2021/04/02/testposter/"/>
      <url>2021/04/02/testposter/</url>
      
        <content type="html"><![CDATA[<p>​    几经波折，苦熬3天，终于大致完成我的博客搭建。可能存在着很多问题，但已经开始了，就要坚持！</p><p>​    看来要随手记笔记，也要按照步骤走。有时会带有一定运气的成分。选择最优的，最完美的东西。反正得保留一些强迫症。</p><p>​    鉴于博客园的不稳定，自己搞一个博客是非常有必要的。这样就不怕别人的服务器炸了。想拥有自己的博客收集地。今天完成了！</p><p>​    今天完成了✌</p>]]></content>
      
      
      <categories>
          
          <category> 随笔记录 </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
